package hotsequence;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
/*给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
*/
public class One_TwoSum {
    public static void main(String[] args) {
        int[] array = {3,3};
        int target = 6;
        //System.out.println(Arrays.toString(twoSum(array,target)));//使用两次遍历哈希表的方式
        System.out.println(Arrays.toString(oneTwoSum(array,target)));//使用一次遍历哈希表的方式

    }

    public int[] atwoSum(int[] nums, int target) {

        int i = 0;
        int j = 0;
        for(i=0;i<nums.length;i++){
            for(j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                    return new int[]{i,j};
                }
            }
        }
        throw new IllegalArgumentException("no two sum solution");
    }

   //解题方法一：两遍哈希表
    public static int[] twoSum(int[] nums, int target){

        Map<Integer,Integer> map = new HashMap();

        for (int i = 0; i < nums.length; i++) {

            map.put(nums[i],i);

        }

        for (int i = 0; i < nums.length; i++) {
            if(map.containsKey(target - nums[i]) && i != map.get(target - nums[i])){
               return new int[]{i,map.get(target - nums[i])};
            }

        }
        throw new IllegalArgumentException("no two sum solution");

    }

    //解题方法二：一遍哈希表
    public static int[] oneTwoSum(int[] nums,int target){
        Map<Integer,Integer> map = new HashMap();
        for (int i = 0; i < nums.length; i++) {
            if(map.containsKey(target - nums[i]) && i != map.get(target - nums[i])){
                return new int[]{i,map.get(target - nums[i])};
            }
            map.put(nums[i], i);
        }
        throw new IllegalArgumentException("no two sum solution");
    }
}
